import json
import logging
from pathlib import Path
from typing import List, Set

from models.types import DraftInput, RecommendationResponse, HeroSuggestion

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
DATA_DIR = Path(__file__).resolve().parent.parent / "data"
HEROES_PATH = DATA_DIR / "heroes.json"
META_PATH = DATA_DIR / "meta.json"

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≥–µ—Ä–æ–µ–≤ ===
def load_valid_heroes() -> Set[str]:
    if not HEROES_PATH.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {HEROES_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–∏ –µ–≥–æ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç meta_loader.")
    with open(HEROES_PATH, encoding="utf-8") as f:
        return {hero["name"].lower() for hero in json.load(f)}

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö ===
def load_meta_data() -> dict:
    if not META_PATH.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {META_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏ meta_loader.py.")
    with open(META_PATH, encoding="utf-8") as f:
        return json.load(f)

# === –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ –≥–µ—Ä–æ–µ–≤ ===
def clean_heroes(raw_list: List[str], valid_heroes: Set[str], max_len: int, role: str) -> List[str]:
    cleaned = []
    for h in raw_list:
        h_clean = h.lower()
        if h_clean in valid_heroes and h_clean not in cleaned:
            cleaned.append(h_clean)
        else:
            logger.warning(f"‚ö†Ô∏è –ì–µ—Ä–æ–π '{h}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏ –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ {role}.")
    return cleaned[:max_len]

# === –ü–æ–¥–±–æ—Ä –≥–µ—Ä–æ–µ–≤ –ø–æ –º–µ—Ç–µ –∏ —Ä–æ–ª–∏ ===
def recommend_by_meta(user_role: str, excluded: Set[str], meta: dict) -> List[HeroSuggestion]:
    role_map = {
        "carry": ["Carry"],
        "mid": ["Nuker"],
        "offlane": ["Initiator", "Durable"],
        "pos4": ["Support", "Disabler"],
        "pos5": ["Support", "Disabler"],
    }

    normalized_role = user_role.strip().lower()
    target_roles = role_map.get(normalized_role)

    if not target_roles:
        logger.warning(f"‚ö†Ô∏è –†–æ–ª—å '{user_role}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–¥–±–æ—Ä –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return []

    logger.info(f"üéØ –ü–æ–¥–±–æ—Ä –≥–µ—Ä–æ–µ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Ä–æ–ª–∏ '{normalized_role}' —á–µ—Ä–µ–∑: {target_roles}")

    suggestions = []
    for name, info in meta.items():
        if name.startswith("_") or name in excluded:
            continue

        hero_roles = [r.lower() for r in info.get("roles", [])]
        if any(role.lower() in hero_roles for role in target_roles):
            suggestions.append({
                "name": name,
                "score": info.get("winrate", 0),
                "reason": f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –¥–ª—è —Ä–æ–ª–∏ {normalized_role}"
            })

    top = sorted(suggestions, key=lambda h: h["score"], reverse=True)[:3]
    return [HeroSuggestion(**s) for s in top]

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ===
def generate_recommendation(draft: DraftInput) -> RecommendationResponse:
    valid_heroes = load_valid_heroes()
    meta = load_meta_data()
    warnings = []

    clean_enemy = clean_heroes(draft.enemy_heroes, valid_heroes, 5, "–≤—Ä–∞–≥–æ–≤")
    clean_ally = clean_heroes(draft.ally_heroes, valid_heroes, 4, "—Å–æ—é–∑–Ω–∏–∫–æ–≤")

    user_hero = draft.user_hero.lower() if draft.user_hero else None
    if user_hero and user_hero not in valid_heroes:
        warnings.append(f"‚ö†Ô∏è –ì–µ—Ä–æ–π '{user_hero}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        user_hero = None

    excluded_heroes = set(clean_enemy + clean_ally)
    if user_hero:
        excluded_heroes.add(user_hero)

    suggestions = []
    if not user_hero:
        suggestions = recommend_by_meta(draft.user_role, excluded_heroes, meta)

        if not suggestions:
            # Fallback: –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-3 –≥–µ—Ä–æ–µ–≤ –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É
            fallback = sorted(
                [
                    {"name": k, "score": v.get("winrate", 0), "reason": "–õ—É—á—à–∏–π –≤–∏–Ω—Ä–µ–π—Ç –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"}
                    for k, v in meta.items()
                    if k not in excluded_heroes and not k.startswith("_")
                ],
                key=lambda h: h["score"],
                reverse=True
            )[:3]
            suggestions = [HeroSuggestion(**h) for h in fallback]
            warnings.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≥–µ—Ä–æ–µ–≤ –ø–æ —Ä–æ–ª–∏ ‚Äî –ø–æ–∫–∞–∑–∞–Ω—ã –ª—É—á—à–∏–µ –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É.")

    return RecommendationResponse(
        suggested_heroes=suggestions,
        lane_opponents=clean_enemy[:2],
        starting_items=["tango", "branches", "circlet"],
        build_easy=["boots", "witch_blade", "aghanims_scepter"],
        build_even=["boots", "kaya", "bkb"],
        build_hard=["boots", "euls", "ghost_scepter"],
        warnings=warnings
    )
