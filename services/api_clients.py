import requests
import logging
from functools import lru_cache
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

BASE_URL = "https://api.opendota.com/api"

# ======= Hero Mapping =======

@lru_cache(maxsize=1)
def get_hero_id_map() -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ {normalized_name: id} –∏–∑ OpenDota.
    –ü—Ä–∏–º–µ—Ä: 'phantom_assassin' -> 44
    """
    try:
        response = requests.get(f"{BASE_URL}/heroes", timeout=10)
        response.raise_for_status()
        data = response.json()

        hero_map = {
            normalize_hero_name(hero["localized_name"]): hero["id"]
            for hero in data
        }
        logger.info(f"üó∫Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –≥–µ—Ä–æ–µ–≤: {len(hero_map)} –≥–µ—Ä–æ–µ–≤")
        return hero_map

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –≥–µ—Ä–æ–µ–≤: {e}")
        raise


@lru_cache(maxsize=1)
def get_id_to_hero_map() -> Dict[int, str]:
    """
    –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ {id: normalized_name}
    """
    hero_map = get_hero_id_map()
    return {v: k for k, v in hero_map.items()}


def normalize_hero_name(name: str) -> str:
    return name.strip().lower().replace(" ", "_").replace("'", "")

# ======= Matchups & Counters =======

def get_counters(hero_id: int, limit: int = 10) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç—á–∞–ø—ã –≥–µ—Ä–æ—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N –≥–µ—Ä–æ–µ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω –∫–æ–Ω—Ç—Ä–∏—Ç –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ (–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç).
    """
    try:
        response = requests.get(f"{BASE_URL}/heroes/{hero_id}/matchups", timeout=10)
        response.raise_for_status()
        data = response.json()

        # –î–æ–±–∞–≤–ª—è–µ–º win_rate –Ω–∞ –ª–µ—Ç—É
        for item in data:
            if item["games_played"] > 0:
                item["win_rate"] = item["wins"] / item["games_played"] * 100
            else:
                item["win_rate"] = 0

        sorted_counters = sorted(data, key=lambda x: x["win_rate"])
        top_counters = sorted_counters[:limit]
        logger.info(f"üìâ –ü–æ–ª—É—á–µ–Ω—ã —Ö—É–¥—à–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –¥–ª—è –≥–µ—Ä–æ—è ID={hero_id}")
        return top_counters

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–∞–ø–æ–≤ –¥–ª—è –≥–µ—Ä–æ—è ID={hero_id}: {e}")
        return []  # –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

# ======= Utility =======

def get_hero_name_by_id(hero_id: int) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –≥–µ—Ä–æ—è –ø–æ ID.
    """
    return get_id_to_hero_map().get(hero_id)


def get_hero_id_by_name(name: str) -> Optional[int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç ID –≥–µ—Ä–æ—è –ø–æ –µ–≥–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏.
    """
    return get_hero_id_map().get(normalize_hero_name(name))
