from dotenv import load_dotenv
load_dotenv()

import os
import json
import logging
from pathlib import Path
from typing import Dict, Optional

from openai import OpenAI, OpenAIError, APIError
from jsonschema import validate, ValidationError

from models.types import DraftInput, RecommendationResponse
from services.logic import generate_recommendation

# ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ====
PROMPT_PATH = Path(__file__).resolve().parent.parent / "prompts" / "ai_prompt.txt"
SCHEMA_PATH = Path(__file__).resolve().parent.parent / "models" / "openai_response_schema.json"

MODEL = os.getenv("OPENAI_MODEL", "gpt-4")
TEMPERATURE = float(os.getenv("OPENAI_TEMP", "0.7"))
MAX_TOKENS = int(os.getenv("OPENAI_MAX_TOKENS", "1500"))
API_KEY = os.getenv("OPENAI_API_KEY")

client: Optional[OpenAI] = None


def is_valid_api_key(key: Optional[str]) -> bool:
    return key and key.startswith("sk-") and len(key) > 20


def init_openai_client() -> Optional[OpenAI]:
    if not is_valid_api_key(API_KEY):
        logging.warning("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return None
    return OpenAI(api_key=API_KEY)


def load_base_prompt() -> str:
    if not PROMPT_PATH.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {PROMPT_PATH}")
    with PROMPT_PATH.open("r", encoding="utf-8") as f:
        return f.read().strip()


def format_draft_input(draft: DraftInput) -> Dict:
    return {
        "role": draft.user_role,
        "user_hero": draft.user_hero,
        "allies": draft.ally_heroes or [],
        "enemies": draft.enemy_heroes or [],
    }


def build_user_prompt(draft: DraftInput, input_data: Dict) -> str:
    base = (
        f"–í–æ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥—Ä–∞—Ñ—Ç–∞:\n{input_data}\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∏ –µ–≥–æ —Ä–æ–ª—å –≤ –º–∞—Ç—á–µ. "
        "–ü–æ–¥–±–µ—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞–≥, —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω, –∫–æ–Ω—Ç—Ä–æ–ª—å, –ø—É—à –∏ —Ç.–¥.).\n"
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç 2 –¥–æ 4 –±–∏–ª–¥–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n"
        "- –Ω–∞–∑–≤–∞–Ω–∏–µ (name)\n"
        "- –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (description)\n"
        "- –æ—Ü–µ–Ω–∫—É —à–∞–Ω—Å–∞ –ø–æ–±–µ–¥—ã (winrate_score)\n"
        "- —Å–±–æ—Ä–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (build)\n"
        "- —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (starting_items)\n"
        "- –ø—Ä–æ–∫–∞—á–∫—É —Å–∫–∏–ª–ª–æ–≤ (skill_build)\n"
        "- —Ç–∞–ª–∞–Ω—Ç—ã (talents)\n"
        "- –ø–ª–∞–Ω –Ω–∞ –∏–≥—Ä—É (game_plan)\n"
        "- –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º (item_notes)\n"
        "–¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å –∫–ª—é—á 'recommended_aspect' ‚Äî –º–∞–≥, –ø—É—à, –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏ —Ç.–ø.\n"
        "–û—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º JSON-—Ñ–æ—Ä–º–∞—Ç–µ."
    )
    if draft.user_hero:
        return base + "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª –≥–µ—Ä–æ—è ‚Äî –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥—Ä—É–≥–∏—Ö. –§–æ—Ä–º–∏—Ä—É–π –±–∏–ª–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≥–æ."
    else:
        return base + "\n–ï—Å–ª–∏ –≥–µ—Ä–æ–π –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ, –Ω–æ —Ç–æ–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä—É–π –±–∏–ª–¥."


def validate_openai_json(data: Dict) -> bool:
    try:
        with open(SCHEMA_PATH, "r", encoding="utf-8") as f:
            schema = json.load(f)
        validate(instance=data, schema=schema)
        return True
    except ValidationError as ve:
        logging.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç OpenAI –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ö–µ–º—ã: %s", ve.message)
        return False
    except Exception as e:
        logging.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: %s", e)
        return False


def generate_openai_recommendation(draft: DraftInput) -> RecommendationResponse:
    global client
    if not client:
        client = init_openai_client()

    if not client:
        logging.warning("‚ö†Ô∏è OpenAI client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ª–æ–≥–∏–∫–∞.")
        return generate_recommendation(draft)

    prompt = load_base_prompt()
    input_data = format_draft_input(draft)
    user_prompt = build_user_prompt(draft, input_data)

    try:
        response = client.chat.completions.create(
            model=MODEL,
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": user_prompt},
            ],
            temperature=TEMPERATURE,
            max_tokens=MAX_TOKENS,
        )

        content = response.choices[0].message.content.strip()
        logging.info("üì© –û—Ç–≤–µ—Ç OpenAI: %s", content[:500])

        parsed = json.loads(content)

        if not validate_openai_json(parsed):
            logging.warning("‚ùå –û—Ç–≤–µ—Ç –æ—Ç OpenAI –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback.")
            return generate_recommendation(draft)

        return RecommendationResponse(**parsed)

    except json.JSONDecodeError as je:
        logging.error("‚ùå JSON –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: %s", je)
        logging.debug("–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç OpenAI:\n%s", content)
        return generate_recommendation(draft)

    except APIError as ae:
        logging.exception("üß® API –æ—à–∏–±–∫–∞ OpenAI: %s", ae)
        return generate_recommendation(draft)

    except OpenAIError as oe:
        logging.exception("üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ OpenAI: %s", oe)
        return generate_recommendation(draft)

    except Exception as e:
        logging.exception("üíÄ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenAI.")
        return generate_recommendation(draft)
