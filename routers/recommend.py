from fastapi import APIRouter, HTTPException, Query, Request
from models.types import DraftInput, RecommendationResponse
from services.logic import generate_recommendation
from services.openai_generator import generate_openai_recommendation
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from slowapi import Limiter

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

router = APIRouter(
    prefix="/api",
    tags=["recommendation"]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏–º–∏—Ç–µ—Ä–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ IP)
limiter = Limiter(key_func=get_remote_address)

@router.post(
    "/recommend",
    response_model=RecommendationResponse,
    response_model_exclude_none=True,
    summary="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≥–µ—Ä–æ—è –∏ –±–∏–ª–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥—Ä–∞—Ñ—Ç–∞",
    description=(
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –¥—Ä–∞—Ñ—Ç —Å —É—á—ë—Ç–æ–º –≥–µ—Ä–æ–µ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤, —Å–æ—é–∑–Ω–∏–∫–æ–≤ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
        "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –±–∏–ª–¥, –≥–µ—Ä–æ–µ–≤, —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, —Ç–∞–ª–∞–Ω—Ç—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –∏–≥—Ä—É."
    ),
    response_description="–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –±–∏–ª–¥—É, –≥–µ—Ä–æ—è–º –∏ –ø–ª–∞–Ω—É –∏–≥—Ä—ã"
)
@limiter.limit("5/minute")
async def recommend_team(
    request: Request,
    draft: DraftInput,
    use_openai: bool = Query(
        default=True,
        description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
    )
):
    client_ip = get_remote_address(request)
    logger.info(f"[{client_ip}] –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω | use_openai={use_openai}")

    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω –¥—Ä–∞—Ñ—Ç: %s", draft.model_dump())

        if use_openai:
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ OpenAI")
            try:
                result = generate_openai_recommendation(draft)
            except Exception as ai_error:
                logger.warning("OpenAI –æ—à–∏–±–∫–∞: %s", ai_error)
                logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback-–ª–æ–≥–∏–∫—É")
                result = generate_recommendation(draft)
        else:
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ fallback-–ª–æ–≥–∏–∫—É")
            result = generate_recommendation(draft)

        logger.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
        return result

    except ValueError as ve:
        logger.warning("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %s", ve)
        raise HTTPException(status_code=400, detail=str(ve))

    except FileNotFoundError as fnf:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª —Å –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–º–∏: %s", fnf)
        raise HTTPException(status_code=500, detail="–§–∞–π–ª —Å –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e, exc_info=True)
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
