import logging
from models.types import DraftInput, RecommendationResponse
from services.logic import generate_recommendation
from services.openai_generator import generate_openai_recommendation

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


def recommend_hero_and_build(draft: DraftInput, use_openai: bool = True) -> RecommendationResponse:


    logger.info("üì• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: %s", draft.model_dump())
    logger.info("üß† OpenAI —Ä–µ–∂–∏–º: %s", use_openai)

    try:
        if use_openai:
            try:
                logger.info("üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI...")
                response = generate_openai_recommendation(draft)
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI.")
                return response

            except Exception as e:
                logger.warning("‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –¥–∞–ª –æ—à–∏–±–∫—É: %s", e)
                logger.info("‚Ü©Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback-–ª–æ–≥–∏–∫—É.")

        logger.info("üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ fallback-–ª–æ–≥–∏–∫—É...")
        response = generate_recommendation(draft)
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ fallback.")
        return response

    except Exception as critical_error:
        logger.critical("üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: %s", critical_error, exc_info=True)
        raise
