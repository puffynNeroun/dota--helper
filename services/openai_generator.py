import os
import json
import logging
import re
from pathlib import Path
from typing import Dict, Optional, List
from functools import lru_cache

# === –ì—Ä—É–∑–∏–º .env ===
from dotenv import load_dotenv
load_dotenv()

from openai import OpenAI
from openai.types.chat import ChatCompletionMessage
from jsonschema import validate, ValidationError

from models.types import (
    DraftInput,
    RecommendationResponse,
    DetailedBuildResponse,
    BuildVariant,
)
from services.logic import (
    generate_recommendation,
    fallback_build_options,
    fallback_detailed_build,
)
from services.prompt_builder import PromptBuilder
from services.cache import load_build_from_cache, save_build_to_cache

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
SCHEMA_PATH = Path(__file__).parent.parent / "models" / "openai_response_schema.json"
MODEL = os.getenv("OPENAI_MODEL", "gpt-4")
TEMPERATURE = float(os.getenv("OPENAI_TEMP", "0.7"))
MAX_TOKENS = int(os.getenv("OPENAI_MAX_TOKENS", "2000"))

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# === –î–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ: ===
def extract_json_block(text: str) -> str:
    match = re.search(r"```(?:json)?\s*(\{.*?\})\s*```", text.strip(), re.DOTALL)
    return match.group(1) if match else text.strip()


# === –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞ ===
def is_valid_api_key(key: Optional[str]) -> bool:
    return bool(re.fullmatch(r"sk-\w{10,}|sk-proj-\w{10,}", key or ""))

@lru_cache()
def get_openai_client() -> OpenAI:
    api_key = os.getenv("OPENAI_API_KEY")

    def is_flexible_key(key: Optional[str]) -> bool:
        if not key:
            return False
        return (
            key.startswith("sk-") and len(key) > 20
        )

    if not is_flexible_key(api_key):
        logging.error("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        logging.debug(f"üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á: {api_key}")
        raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")

    logging.info(f"üîë OpenAI client initialized with key prefix: {api_key[:10]}... (–¥–ª–∏–Ω–∞: {len(api_key)})")
    return OpenAI(api_key=api_key)


# === –í–∞–ª–∏–¥–∞—Ü–∏—è JSON –ø–æ —Å—Ö–µ–º–µ ===
def validate_openai_json(data: Dict) -> bool:
    try:
        with open(SCHEMA_PATH, "r", encoding="utf-8") as f:
            schema = json.load(f)

        allowed_keys = set(schema["properties"].keys())
        data = {k: v for k, v in data.items() if k in allowed_keys}
        validate(instance=data, schema=schema)
        return True
    except ValidationError as ve:
        logging.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç OpenAI –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ö–µ–º—ã: %s", ve.message)
        logging.debug("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: %s", json.dumps(data, indent=2, ensure_ascii=False))
        return False
    except Exception as e:
        logging.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: {e}")
        return False

# === –ö–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç—É ===
def chat_completion(system_msg: str, user_msg: str, max_tokens: int = MAX_TOKENS) -> Optional[ChatCompletionMessage]:
    try:
        client = get_openai_client()
        response = client.chat.completions.create(
            model=MODEL,
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": user_msg},
            ],
            temperature=TEMPERATURE,
            max_tokens=max_tokens,
        )
        if response.choices:
            return response.choices[0].message
        logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ choices –æ—Ç OpenAI.")
        return None
    except Exception as e:
        logging.exception(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        return None

# === /recommend ===
def generate_openai_recommendation(draft: DraftInput) -> RecommendationResponse:
    builder = PromptBuilder()
    prompt_text = builder.build_recommend_prompt(draft)

    response = chat_completion(
        system_msg=builder.templates["base"],
        user_msg=prompt_text
    )

    if not response:
        logging.warning("‚ö†Ô∏è OpenAI –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, fallback.")
        return generate_recommendation(draft)

    content = extract_json_block(response.content)
    if not content or content.lower() in ("null", "none"):
        logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI. fallback.")
        return generate_recommendation(draft)

    try:
        parsed = json.loads(content)
    except json.JSONDecodeError as jde:
        logging.error(f"üß® JSONDecodeError: {jde} | Raw content: {content}")
        return generate_recommendation(draft)

    if not validate_openai_json(parsed):
        logging.warning("‚ùå –û—Ç–≤–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. fallback.")
        return generate_recommendation(draft)

    try:
        return RecommendationResponse(**parsed)
    except Exception as e:
        logging.exception(f"üíÄ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RecommendationResponse: {e}")
        return generate_recommendation(draft)


# === /builds/options ===
def generate_build_options(
    hero: str,
    role: str,
    aspect: str,
    enemy_lane_heroes: List[str]
) -> List[BuildVariant]:
    user_prompt = (
        f"–ì–µ—Ä–æ–π: {hero}\n"
        f"–†–æ–ª—å: {role}\n"
        f"–ê—Å–ø–µ–∫—Ç: {aspect}\n"
        f"–í—Ä–∞–≥–∏ –Ω–∞ –ª–∏–Ω–∏–∏: {enemy_lane_heroes}\n\n"
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3-5 –±–∏–ª–¥–æ–≤ (BuildVariant), –∫–∞–∂–¥—ã–π —Å –ø–æ–ª—è–º–∏:\n"
        "- id (—Å—Ç—Ä–æ–∫–∞, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: \"build1\", \"b2\", \"custom-3\")\n"
        "- label (–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–ª–¥–∞)\n"
        "- description (–æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–ª–¥–∞)\n"
        "–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON-–º–∞—Å—Å–∏–≤–µ."
    )

    response = chat_completion(
        system_msg="–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ Dota 2. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –±–∏–ª–¥-–æ–ø—Ü–∏–∏.",
        user_msg=user_prompt,
        max_tokens=1000
    )

    if not response:
        return fallback_build_options(hero, role, aspect, enemy_lane_heroes)

    try:
        parsed = json.loads(extract_json_block(response.content))

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ id –∫ —Å—Ç—Ä–æ–∫–µ
        for build in parsed:
            if "id" in build:
                build["id"] = str(build["id"])

        # –í–µ—Ä–Ω—ë–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        return parsed


    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ build options: {e}")
        return fallback_build_options(hero, role, aspect, enemy_lane_heroes)


# === /builds/detailed ===
def generate_detailed_build(
    hero: str,
    role: str,
    aspect: str,
    selected_build_id: str,
    enemy_heroes: List[str],
    ally_heroes: List[str]
) -> DetailedBuildResponse:
    cached = load_build_from_cache(selected_build_id)
    if cached:
        logging.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –¥–ª—è build_id={selected_build_id}")
        return DetailedBuildResponse(**cached)

    user_prompt = (
        f"–ì–µ—Ä–æ–π: {hero}, –†–æ–ª—å: {role}, –ê—Å–ø–µ–∫—Ç: {aspect}\n"
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–∏–ª–¥: {selected_build_id}\n"
        f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏: {enemy_heroes}\n"
        f"–°–æ—é–∑–Ω–∏–∫–∏: {ally_heroes}\n\n"
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –±–∏–ª–¥ —Å:\n"
        "- starting_items, early_game_items, mid_game_items, late_game_items, situational_items\n"
        "- skill_build (Q/W/E/R/Stats)\n"
        "- talents (10/15/20/25 —É—Ä–æ–≤–Ω–∏)\n"
        "- game_plan (early/mid/late)\n"
        "- item_explanations\n"
        "- warnings\n"
        "- source: 'openai'\n"
        "- builds: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –±–∏–ª–¥–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)\n"
        "–û—Ç–≤–µ—Ç –≤ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
    )

    response = chat_completion(
        system_msg="–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Dota 2. –§–æ—Ä–º–∏—Ä—É–π –±–∏–ª–¥-–ø–ª–∞–Ω—ã.",
        user_msg=user_prompt,
        max_tokens=1500
    )

    if not response:
        return fallback_detailed_build(hero, role, aspect, selected_build_id, enemy_heroes, ally_heroes)

    content = extract_json_block(response.content)
    try:
        parsed = json.loads(content)

        # –ï—Å–ª–∏ OpenAI –≤–ª–æ–∂–∏–ª –≤—Å—ë –≤ –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π (build / build1 / –∏ —Ç.–ø.)
        if isinstance(parsed, dict) and len(parsed) == 1 and isinstance(next(iter(parsed.values())), dict):
            build_data = next(iter(parsed.values()))
            parsed = build_data

        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ:
        for key in ["hero", "role", "aspect"]:
            parsed.pop(key, None)

        # –ü—Ä–∏–≤–æ–¥–∏–º warnings –∫ List[str]
        if isinstance(parsed.get("warnings"), str):
            parsed["warnings"] = [parsed["warnings"]]
        elif isinstance(parsed.get("warnings"), dict):
            parsed["warnings"] = list(parsed["warnings"].values())

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        parsed.setdefault("builds", [])
        parsed["source"] = "openai"

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if validate_openai_json(parsed):
            save_build_to_cache(selected_build_id, parsed)

        return DetailedBuildResponse(**parsed)

    except Exception as e:
        logging.exception(f"‚ùå –û—à–∏–±–∫–∞ detailed build JSON: {e} | Content: {content}")
        return fallback_detailed_build(hero, role, aspect, selected_build_id, enemy_heroes, ally_heroes)
