import json
import logging
from pathlib import Path
from typing import List, Set

from models.types import (
    DraftInput,
    RecommendationResponse,
    HeroSuggestion,
    BuildPlan,
    BuildVariant,
    BuildOptionsRequest,
    BuildOptionsResponse,
    DetailedBuildRequest,
    DetailedBuildResponse,
)

logger = logging.getLogger(__name__)

DATA_DIR = Path(__file__).resolve().parent.parent / "data"
HEROES_PATH = DATA_DIR / "heroes.json"
META_PATH = DATA_DIR / "meta.json"


def load_valid_heroes() -> Set[str]:
    if not HEROES_PATH.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {HEROES_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±–Ω–æ–≤–∏ —á–µ—Ä–µ–∑ meta_loader.")
    with open(HEROES_PATH, encoding="utf-8") as f:
        return {hero["name"].lower() for hero in json.load(f)}


def load_meta_data() -> dict:
    if not META_PATH.exists():
        raise FileNotFoundError(f"–§–∞–π–ª {META_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏ meta_loader.")
    with open(META_PATH, encoding="utf-8") as f:
        return json.load(f)


def clean_heroes(raw: List[str], valid: Set[str], max_len: int, role: str) -> List[str]:
    result = []
    for h in raw:
        h_l = h.lower()
        if h_l in valid and h_l not in result:
            result.append(h_l)
        else:
            logger.warning(f"‚ö†Ô∏è –ì–µ—Ä–æ–π '{h}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ {role}.")
    return result[:max_len]


def recommend_by_meta(user_role: str, excluded: Set[str], meta: dict) -> List[HeroSuggestion]:
    role_map = {
        "carry": ["Carry"],
        "mid": ["Nuker"],
        "safelane": ["Carry"],
        "offlane": ["Initiator", "Durable"],
        "support": ["Support", "Disabler"],
        "hard support": ["Support", "Disabler"],
    }
    role_norm = user_role.strip().lower()
    mapped = role_map.get(role_norm)
    if not mapped:
        logger.warning(f"‚ö†Ô∏è –†–æ–ª—å '{user_role}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
        return []

    logger.info(f"üéØ –ü–æ–∏—Å–∫ –≥–µ—Ä–æ–µ–≤ –ø–æ —Ä–æ–ª—è–º {mapped}")
    candidates = []
    for name, info in meta.items():
        if name.startswith("_") or name in excluded:
            continue
        hero_roles = [r.lower() for r in info.get("roles", [])]
        if any(r.lower() in hero_roles for r in mapped):
            candidates.append({
                "name": name,
                "score": info.get("winrate", 0),
                "reason": f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –¥–ª—è —Ä–æ–ª–∏ {role_norm}"
            })

    top = sorted(candidates, key=lambda h: h["score"], reverse=True)[:3]
    return [HeroSuggestion(**s) for s in top]


def generate_simple_build(user_hero: str) -> List[BuildPlan]:
    return [
        BuildPlan(
            name="–ë–∞–∑–æ–≤—ã–π –±–∏–ª–¥",
            description=f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∏–ª–¥ –Ω–∞ {user_hero.title()}",
            winrate_score=0.52,
            highlight=True,
            build=["boots", "magic_wand", "kaya", "bkb"],
            starting_items=["tango", "branches", "faerie_fire"],
            skill_build=["Q", "E", "Q", "W", "Q", "R", "Q", "W", "W", "W"],
            talents={
                "10": "+20 —É—Ä–æ–Ω–∞",
                "15": "+10% spell amp",
                "20": "+0.3s stun",
                "25": "+25% magic resistance"
            },
            game_plan={
                "early_game": "–ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–Ω–∏–∏ –∏ —Ö–∞—Ä–∞—Å –≤—Ä–∞–≥–æ–≤.",
                "mid_game": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∏–º—Ñ–∞–π—Ç–∞–º –∏ –ø—É—à –ª–∞–π–Ω–æ–≤.",
                "late_game": "–†–µ—à–∞—é—â–∏–µ –±–æ–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–ª—é—á–µ–≤—ã—Ö –≥–µ—Ä–æ–µ–≤."
            },
            item_notes={
                "kaya": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω.",
                "bkb": "–ù–µ–æ–±—Ö–æ–¥–∏–º –ø—Ä–æ—Ç–∏–≤ –º–∞–≥–æ–≤ –∏ –¥–∏–∑–µ–π–±–ª–æ–≤."
            }
        )
    ]


def generate_recommendation(draft: DraftInput) -> RecommendationResponse:
    valid_heroes = load_valid_heroes()
    meta = load_meta_data()
    warnings = []

    clean_enemy = clean_heroes(draft.enemy_heroes, valid_heroes, 5, "–≤—Ä–∞–≥–æ–≤")
    clean_ally = clean_heroes(draft.ally_heroes, valid_heroes, 4, "—Å–æ—é–∑–Ω–∏–∫–æ–≤")

    user_hero = draft.user_hero.lower() if draft.user_hero else None
    if user_hero and user_hero not in valid_heroes:
        warnings.append(f"‚ö†Ô∏è –ì–µ—Ä–æ–π '{user_hero}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        user_hero = None

    excluded = set(clean_enemy + clean_ally)
    if user_hero:
        excluded.add(user_hero)

    suggestions, builds, source = [], [], None

    if not user_hero:
        suggestions = recommend_by_meta(draft.user_role, excluded, meta)
        source = "openai"

        if not suggestions:
            fallback = sorted(
                [
                    {"name": name, "score": info.get("winrate", 0), "reason": "–õ—É—á—à–∏–π –≤–∏–Ω—Ä–µ–π—Ç –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"}
                    for name, info in meta.items()
                    if name not in excluded and not name.startswith("_")
                ],
                key=lambda h: h["score"],
                reverse=True
            )[:3]
            suggestions = [HeroSuggestion(**f) for f in fallback]
            warnings.append("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –≥–µ—Ä–æ–µ–≤ –ø–æ —Ä–æ–ª–∏ ‚Äî –ø–æ–∫–∞–∑–∞–Ω—ã –ª—É—á—à–∏–µ –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É.")
            source = "fallback"
    else:
        builds = generate_simple_build(user_hero)
        source = "fallback"

    return RecommendationResponse(
        recommended_aspect=draft.aspect or "–æ–±—â–∏–π",
        builds=builds,
        suggested_heroes=suggestions,
        lane_opponents=clean_enemy[:2],
        starting_items=["tango", "branches", "circlet"],
        build_easy=["boots", "witch_blade", "aghanims_scepter"],
        build_even=["boots", "kaya", "bkb"],
        build_hard=["boots", "euls", "ghost_scepter"],
        warnings=warnings,
        source=source
    )


def fallback_build_options(_: BuildOptionsRequest) -> List[BuildVariant]:
    return [
        BuildVariant(id="default_magic", label="–ú–∞–≥", description="–§–æ–∫—É—Å –Ω–∞ AoE —É—Ä–æ–Ω –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å"),
        BuildVariant(id="default_right_click", label="–§–∏–∑. —É—Ä–æ–Ω", description="–ß–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π —É—Ä–æ–Ω –∏ –∫—Ä–∏—Ç—ã"),
        BuildVariant(id="default_aura", label="–ê—É—Ä–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", description="–ß–µ—Ä–µ–∑ –ø—Ä–µ–¥–º–µ—Ç—ã –∞—É—Ä—ã –∏ –∫–æ–º–∞–Ω–¥–Ω—ã–π –∏–º–ø–∞–∫—Ç")
    ]


def fallback_detailed_build(
    hero: str,
    role: str,
    aspect: str,
    enemy_lane_heroes: List[str],
    team_heroes: List[str],
    selected_build_id: str
) -> DetailedBuildResponse:
    return DetailedBuildResponse(
        starting_items=["tango", "mantle_of_intelligence", "circlet"],
        early_game_items=["boots", "null_talisman"],
        mid_game_items=["aether_lens", "kaya"],
        late_game_items=["bkb", "octarine_core"],
        situational_items=["ghost_scepter", "glimmer_cape"],
        skill_build=["Q", "E", "Q", "W", "Q", "R", "Q", "W", "W", "W", "R", "E", "E", "E", "Stats", "R"],
        talents={"10": "+15% spell amp", "15": "+100 cast range"},
        game_plan={
            "early_game": "–î–µ—Ä–∂–∏—Å—å –ø–æ–∑–∞–¥–∏, —Ñ–∞—Ä–º–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏.",
            "mid_game": "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—Ä—Ç—ã, —Å–ø–ª–∏—Ç–ø—É—à –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∏–º—Ñ–∞–π—Ç–æ–≤.",
            "late_game": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–º–ø–∞–∫—Ç –∑–∞ —Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–∫–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è."
        },
        item_explanations={
            "bkb": "–û–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–æ—Ç–∏–≤ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è.",
            "aether_lens": "–ü–æ–≤—ã—à–∞–µ—Ç –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π.",
            "octarine_core": "–°–Ω–∏–∂–µ–Ω–∏–µ –ö–î –∏ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å."
        },
        warnings=["‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã fallback-–ª–æ–≥–∏–∫–æ–π, –Ω–µ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ OpenAI."],
        source="fallback"
    )
