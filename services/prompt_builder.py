from pathlib import Path
from typing import Optional
from models.types import DraftInput


class PromptBuilder:
    def __init__(self):
        self.templates = {
            "base": self._read("prompt_base.txt"),
            "skills": self._read("prompt_skills.txt"),
            "items": self._read("prompt_items.txt"),
            "strategy": self._read("prompt_strategy.txt"),
            "lane": self._read("prompt_lane.txt"),
        }

    def _read(self, filename: str) -> str:
        path = Path("prompts") / filename
        if not path.exists():
            return f"# WARNING: {filename} not found."
        return path.read_text(encoding="utf-8").strip()

    def build_recommend_prompt(self, draft: DraftInput) -> str:
        parts = [
            self.templates["base"],
            f"\n---\nüéØ –†–æ–ª—å –∏–≥—Ä–æ–∫–∞: {draft.user_role}",
            f"üõ°Ô∏è –°–æ—é–∑–Ω–∏–∫–∏: {', '.join(draft.ally_heroes)}",
            f"‚öîÔ∏è –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏: {', '.join(draft.enemy_heroes)}",
        ]

        if draft.user_hero:
            parts.append(f"üßô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª –≥–µ—Ä–æ—è: {draft.user_hero}. –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –¥—Ä—É–≥–∏—Ö.")
        else:
            parts.append("üîç –ì–µ—Ä–æ–π –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∫—Ä–∞—Ç–∫–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º.")

        if draft.aspect:
            parts.append(f"üîÆ –ê—Å–ø–µ–∫—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {draft.aspect}")

        parts.append("---")
        parts.extend([
            self.templates["skills"],
            self.templates["items"],
            self.templates["strategy"],
            self.templates["lane"]
        ])

        return "\n\n".join(parts)
