from fastapi import APIRouter, HTTPException, Query, Request
from models.types import DraftInput, RecommendationResponse
from services.logic import generate_recommendation
from services.openai_generator import generate_openai_recommendation
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from slowapi import Limiter

import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ===
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

router = APIRouter(
    prefix="/api",
    tags=["recommendation"]
)

# === –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ IP ===
limiter = Limiter(key_func=get_remote_address)

@router.post(
    "/recommend",
    response_model=RecommendationResponse,
    response_model_exclude_none=True,
    summary="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≥–µ—Ä–æ—è –∏ –±–∏–ª–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥—Ä–∞—Ñ—Ç–∞",
    description=(
        "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –¥—Ä–∞—Ñ—Ç: —Å–æ—é–∑–Ω–∏–∫–∏, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏, —Ä–æ–ª—å –∏ –∞—Å–ø–µ–∫—Ç. "
        "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≥–µ—Ä–æ—è, –±–∏–ª–¥, —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —Ç–∞–π–º–∏–Ω–≥–∞–º, —Ç–∞–ª–∞–Ω—Ç—ã –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è. "
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Dotabuff, Pro Tracker –∏ –¥—Ä.), –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥ —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é."
    ),
    response_description="–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å –±–∏–ª–¥–æ–º –∏ –ø–ª–∞–Ω–æ–º –∏–≥—Ä—ã"
)
@limiter.limit("5/minute")
async def recommend_team(
    request: Request,
    draft: DraftInput,
    use_openai: bool = Query(
        default=True,
        description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ OpenAI –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –±–∏–ª–¥–æ–≤"
    )
):
    client_ip = get_remote_address(request)
    logger.info(f"[{client_ip}] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é | OpenAI={use_openai}")

    try:
        logger.info("üì• –î—Ä–∞—Ñ—Ç: %s", draft.model_dump())

        if use_openai:
            logger.info("üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OpenAI –∫–∞–∫ –∞–¥–∞–ø—Ç–µ—Ä –±–∏–ª–¥–æ–≤")
            try:
                result = generate_openai_recommendation(draft)
            except Exception as ai_error:
                logger.warning("‚ö†Ô∏è OpenAI —É–ø–∞–ª: %s", ai_error)
                logger.info("‚õëÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback-–ª–æ–≥–∏–∫—É")
                result = generate_recommendation(draft)
        else:
            logger.info("üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ª–æ–≥–∏–∫–∞ –±–µ–∑ OpenAI")
            result = generate_recommendation(draft)

        logger.info("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
        return result

    except ValueError as ve:
        logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: %s", ve)
        raise HTTPException(status_code=400, detail=str(ve))

    except FileNotFoundError as fnf:
        logger.error("üìÇ meta.json –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", fnf)
        raise HTTPException(status_code=500, detail="–§–∞–π–ª —Å –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        logger.critical("üî• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e, exc_info=True)
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
