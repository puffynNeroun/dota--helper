from fastapi import APIRouter, HTTPException, Query, Request
from models.types import DraftInput, RecommendationResponse
from services.logic import generate_recommendation
from services.openai_generator import generate_openai_recommendation
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from slowapi import Limiter

import logging

router = APIRouter(
    prefix="/api",
    tags=["recommendation"]
)

limiter = Limiter(key_func=get_remote_address)

@router.post(
    "/recommend",
    response_model=RecommendationResponse,
    summary="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≥–µ—Ä–æ—è –∏ –±–∏–ª–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥—Ä–∞—Ñ—Ç–∞",
    response_description="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–µ—Ä–æ–µ–≤, —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –±–∏–ª–¥–æ–≤ —Å —É—á—ë—Ç–æ–º –ª–∏–Ω–∏–∏"
)
@limiter.limit("5/minute")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É —Å –æ–¥–Ω–æ–≥–æ IP
async def recommend_team(
    request: Request,
    draft: DraftInput,
    use_openai: bool = Query(
        default=True,
        description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ AI (OpenAI) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
    )
):

    client_ip = get_remote_address(request)
    logging.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç IP {client_ip} | use_openai: {use_openai}")

    try:
        logging.info("–ü–æ–ª—É—á–µ–Ω –¥—Ä–∞—Ñ—Ç: %s", draft.dict())

        if use_openai:
            logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI")
            try:
                result = generate_openai_recommendation(draft)
            except Exception as ai_error:
                logging.warning("–û—à–∏–±–∫–∞ OpenAI: %s", ai_error)
                logging.info("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –º–µ—Ç–∞-–ª–æ–≥–∏–∫—É")
                result = generate_recommendation(draft)
        else:
            logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–∞-–ª–æ–≥–∏–∫—É")
            result = generate_recommendation(draft)

        logging.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
        return result

    except ValueError as ve:
        logging.warning("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %s", ve)
        raise HTTPException(status_code=400, detail=str(ve))

    except FileNotFoundError as fnf:
        logging.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", fnf)
        raise HTTPException(status_code=500, detail="–§–∞–π–ª —Å –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        logging.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: %s", e, exc_info=True)
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
